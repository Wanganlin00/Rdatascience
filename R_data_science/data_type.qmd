# 数据类型

数据类型是指数据的存储格式，定义了存储在变量中的数据的性质和类别，通常无法分解成更简单的类型。

元素类型（element type）

R 有 5种基础和 4 种特殊的 element types：

| 基础 | 特殊 |
|----------------------------------------------------|---------------------------------|
| `numeric` ： `integer`（整型）、 `double`（浮点型） | `raw`（原始型） |
| `logical`（逻辑） | `NA`（缺失值） |
| `character`（字符串） | `NULL`（空） |
| `complex` （复数型） | `expression`（表达式） |

## numeric

### integer

```{r}
mode(2024L)
typeof(2024L)
```

### double

十进制`decimal ()`，科学计数法`scientific ()` ，十六进制`hexadecimal ()`

```{r}
mode(1.1)
typeof(1.1)
0.1234
1.23e-4

# 16进制
0x111
16^2*1+ 16^1*1 + 16^0*1
```

[**浮点标准定义的特殊值**]{.underline}

`Inf`(正无穷)，`-Inf`（负无穷），`NaN`（非数）

-   Infinity 无穷大

    ```{r}
    mode(-Inf)
    Inf
    ```

-   NaN，Not a Number，非数字

    ```{r}
    NaN
    0 / 0
    is.nan(0 / 0)
    mode(0 / 0)
    ```

## logical

比较运算符 `?Comparison`

逻辑运算符`?Logic`

```{r}
typeof(TRUE)
x <- c(T,F,T)
y <- c(T,T,F)

# 非
!x

# 逻辑与
x&y

# 短路逻辑与 &&主要用于单个逻辑值的短路求值，通常在条件判断语句中使用。
x[1] && y[1]


# 或
x|y
x[1] || y[1]

# 异或  不同时为TRUE 或 1
xor(x,y)
```

## character

```{r}
typeof("R language")
sprintf("%.30f", 5.2)
```

## 强制类型转换

逻辑 -\> 整数 -\> 浮点数 -\> 字符

## complex

```{r}
z <- 2+3i
typeof(z) 
is.complex(z)
# 获取实部
Re(z)

# 获取虚部
Im(z)

# 模
Mod(z)

# 共轭
Conj(z)
```

## raw

```{r}
charToRaw("abcde12345") #每个字符的原始二进制表示（ASCII码）转换成16进制输出
typeof(charToRaw("abcde12345")) 
# ?raw
```

## NA

NA，Not Available，该值是其他内容的占位符，因此长度为 1

实际上，每种原子类型有一个缺失值：NA_logical\_、NA_integer\_、NA_double\_、NA_character\_。

```{r}
length(NA)
```

## `NULL`

长度始终为零，并且没有属性。

```{r}
typeof(NULL)
length(NULL)
is.null(NULL)
c()
```

## 表达式

`expression`是一种特殊的 element type，单独的一个`expression`存储的是一个没有执行的 R 代码

```{r}
expr <- expression(1 + 3)
expr

typeof(expr)
eval(expr)
```
