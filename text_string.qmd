# 文本

[**`stringi`**](https://stringi.gagolewski.com/)+ [`stringr`](https://stringr.tidyverse.org/) + [`glue`](https://glue.tidyverse.org/) + [`stringx`](https://stringx.gagolewski.com/)

## [**`stringr`**](https://stringr.tidyverse.org/)

```{r}
x <- c("apple", "banana", "pear","why")

# 连接
str_c(x, collapse = "; ")
paste0("Hello ", c("John", "Susan"))
paste("x",c("a","b"),sep="",collapse = "?")  
paste0("x",c("A","B"),collapse="?")
cat("hello","BOb","\b\n","\bIsn\' R","\t","GREAT?\n",sep = " " )

# 
str_length(x) 
str_sub(x,start =  1,end =  2)
str_dup(x, times = 2)


# 空格
str_pad(x, 10, "both")
x <- c("  a   ", "b   ",  "   c")
str_trim(x,side = "left")

jabberwocky <- str_c(
  "`Twas brillig, and the slithy toves ",
  "did gyre and gimble in the wabe: ",
  "All mimsy were the borogoves, ",
  "and the mome raths outgrabe. "
)
str_wrap(jabberwocky, width = 40)
cat(str_wrap(jabberwocky, width = 40))

# 截断
x <- "This string is moderately long"
rbind(
  str_trunc(x, 20, "right"),
  str_trunc(x, 20, "left"),
  str_trunc(x, 20, "center")
)

# Locale sensitive 
x <- "I like horses."
str_to_upper(x)
str_to_title(x)
str_to_lower(x)
str_to_lower(x,locale =  "tr")

# 排序
x <- c("y", "i", "k")
str_order(x)

str_sort(x,locale = "en")
```

## 匹配正则表达式

```{r}
strings <- c(
  "apple", 
  "219 733 8965", 
  "329-293-8753", 
  "Work: 579-499-7527; Home: 543.355.3679"
)
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
# 检测
str_detect(strings, phone)
grepl(pattern = phone, x = strings)

# 查找
str_subset(strings, phone)
grep(pattern = phone, x = strings,value = T)

str_which(strings, phone)
grep(pattern = phone, x = strings)


# 计数
str_count(strings, phone)

# 定位
str_locate(strings, phone)
str_locate_all(strings, phone)

# 提取
str_extract(strings, phone)
str_extract_all(strings, phone)
str_extract_all(strings, phone, simplify = TRUE)

# 提取匹配的捕获组 （）
str_match(strings, phone)
str_match_all(strings, phone)

# 替换
str_replace(strings, phone, replacement = "XXX-XXX-XXXX")

str_replace_all(strings, phone, replacement = "XXX-XXX-XXXX")

x <- c("apple", "pear", "banana")
str_remove(x, "[aeiou]")      #删除        相当于替换符为空字符""
str_remove_all(x, "[aeiou]")   #str_replace(x, pattern, "")

# 拆分
str_split("a-b-c", pattern = "-")
str_split_fixed("a-b-c", "-", n = 2)

```

## 匹配固定项

```{r}
a1 <- "\u00e1"
a2 <- "a\u0301"
c(a1, a2)
str_detect(a1, fixed(a2))
str_detect(a1, coll(a2))

x <- "This is a sentence."
str_split(x, boundary("word"))
str_count(x, boundary("word"))
str_extract_all(x, boundary("word"))
str_split(x, "")

str_view(c("", "a", "."), stringr::fixed("a"))
str_view("x X", stringr::fixed("X", ignore_case = TRUE))
```

## `str_flatten`

```{r}
df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
df |>
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", ",last = ", and "))
```

## `str_glue()`

```{r}
name <- "Fred"
age <- 50
anniversary <- as.Date("1991-10-12")

str_glue(
  "My name is {name}, ",
  "my age next year is {age + 1}, ",
  "and my anniversary is {format(anniversary, '%A, %B %d, %Y')}."
)

str_glue("My name is {name}, not {{name}}.")

```

## 分离

```{r}
# df |> separate_longer_delim(cols, delim)
# df |> separate_longer_position(cols, width)
# df |> separate_wider_delim(cols, delim, names)
# df |> separate_wider_position(cols, widths)
# df |> separate_wider_regex(cols,patterns)
```

### `separate_longer_*`

```{r}
df1 <- tibble(x = c("a,b,c", "d,e", "f"))
df1 |> 
  separate_longer_delim(x, delim = ",")

df2 <- tibble(x = c("1211", "131", "21"))
df2 |> 
  separate_longer_position(x, width = 1)
```

### `separate_wider_*`

```{r}
df3 <- tibble(x = c("a10.1.2022", "b10.2.2011", "e15.1.2015"))
df3
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", "edition", "year")
  )
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", NA, "year")
  )

df4 <- tibble(x = c("202215TX", "202122LA", "202325CA")) 
df4 |> 
  separate_wider_position(
    x,
    widths = c(year = 4, age = 2, state = 2)
  )

df5 <- tribble(
    ~ str,
    "<Sheryl>-F_34",
    "<Kisha>-F_45",
    "<Brandon>-N_33",
    "<Sharon>-F_38",
    "<Penny>-F_58",
    "<Justin>-M_41",
    "<Patricia>-F_84",
)
df5 |>
    separate_wider_regex(str,
                         patterns = c(
                             "<",
                             name = "[A-Za-z]+",
                             #匹配 ≥1 个字母
                             ">-",
                             gender = ".",
                             #匹配除\n以外任意字符
                             "_",
                             age = "[0-9]+"      #匹配 ≥1 个数字
                         ))
```

## 转义escape

```{r}
# 转义字符串
single_quote <- "\'"
double_quote <- '\"'
backslash <- "\\"
x <- c(single_quote, double_quote, backslash)
x

str_view(x)
```

```{r}
x <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")
x
str_view(x)
```

```{r}
dot <- "\\."
str_view(dot)
str_view(c("abc", "a.c", "bef"), "a\\.c")  
```

## raw

```{r}
single_quote <- r"(')"        # []    ---()---  -()-
double_quote <- r"["]"
backslash <- r"--(\)--"

x <- c(single_quote, double_quote, backslash)
x
str_view(x)
```

## 正则表达式

### 直接匹配

```{r}
str_view(fruit, "berry")  
str_view(fruit, "a...e")
```

### 字符类

```{r}
#   [...]    匹配方括号内任意一个字符
#   [^...]   匹配除方括号内的任意字符
#   .        匹配除 \n 以外的任意字符
str_view(words, "[aeiou]x[aeiou]")  #匹配 中间x两边元音

str_view(words, "[^aeiou]y[^aeiou]") #匹配 中间y两边辅音

#  -   定义一个范围，匹配任何小写字母并匹配任何数字。[a-z][0-9]
#  \   对特殊字符进行转义，[\\^\\-\\]]  匹配 ^、-和 ]
x <- "abcd ABCD  12345 -![@#%^."
str_view(x, "[abc\\^\\[]")
str_view(x, "[a-zA-Z]")
str_view(x, "[^a-z0-9]")


#\d匹配任何数字;匹配任何非数字的内容\D
str_view(x, "\\d+")
str_view(x, "\\D+")
#\s匹配任何空格（例如，空格、制表符、换行符）;匹配任何非空格的内容。\S
str_view(x, "\\s+")
str_view(x, "\\S+")
#\w匹配任何“单词”字符，即字母和数字;匹配任何“非单词”字符。\W
str_view(x, "\\w+")
str_view(x, "\\W+")


#alternation
str_view(fruit, "apple|melon|nut")
str_view(fruit, "aa|ee|ii|oo|uu")


```

### 量词 Quantifier

```{r}
# {n}正好匹配 n 次。
# {n,}至少匹配 n 次。
# {n,m}N 次和 M 次之间的匹配。
x <- c("1234abcd  123 a33a bbbc  2223" , "abb","aab",'abbbbb')
str_view(x, "\\d{2}")

str_view(x, "\\d{2,}")
str_view(x, "\\d{2,3}")


#    ?  匹配 0 或 1 次   {0,1}
#    +  至少匹配一次    {1,}
#    *  匹配任意次数    {0,}



str_view(x, "ab?")  
str_view(x, "ab+")  
str_view(x, "ab*")  
  
# 贪婪量词 尽可能匹配  上述都是

# 懒惰量词 原有量词后加一个 ? ，仅保持最小匹配
str_view(x, "\\d{2,3}?")

str_view(x, "ab??")  # 匹配a
str_view(x, "ab+?")  # 匹配ab
str_view(x, "ab*?")  # 匹配a

```

### 锚点Anchors

```{r}
# 匹配开头或结尾：^  $
str_view(fruit, "^a")
str_view(fruit, "a$")

str_view(fruit, "apple")
str_view(fruit, "^apple$") #仅匹配完整字符串


#  \b  单词的开头或结尾
x <- c("summary(x)", "summarize(df)", "rowsum(x)", "sum(x)")
str_view(x, "sum")
str_view(x, "^sum$")
str_view(x, "\\bsum\\b") 
```

### 零宽匹配

zero-width match

```{r}
str_view("abc", c("$", "^", "\\b"))
str_replace_all("abc", c("$", "^", "\\b"), "++")
```
