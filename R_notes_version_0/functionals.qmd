# 泛函

高阶函数 （higher-order functions）

![](images/higher_order_function.png){fig-align="center" width="50%"}

泛函（functionals）是将函数作为输入并返回向量作为输出的函数。

在R语言中，`purrr`是一个函数式编程包，它提供了一种简洁的方式来迭代数据结构。这个包的名字来源于它所提供的核心功能，即“纯”（**pure**）函数的迭代。在函数式编程中，**纯函数**是指给定相同的输入总是返回相同输出的函数，并且没有副作用（如更改全局变量的值`->`、写入磁盘`write_csv()`或显示在屏幕上`print()`）。

```{r}
library(purrr)
```

## `map` 变体

| 参数 \\ 返回    | 列表                                                        | 原子                                                                 | 同类型                                                           | 无                                                           |
|-----------------|-------------------------------------------------------------|----------------------------------------------------------------------|------------------------------------------------------------------|--------------------------------------------------------------|
| 一个参数        | [`map()`](https://purrr.tidyverse.org/reference/map.html)   | [`map_lgl()`](https://purrr.tidyverse.org/reference/map.html), ...   | [`modify()`](https://purrr.tidyverse.org/reference/modify.html)  | [`walk()`](https://purrr.tidyverse.org/reference/map.html)   |
| 两个参数        | [`map2()`](https://purrr.tidyverse.org/reference/map2.html) | [`map2_lgl()`](https://purrr.tidyverse.org/reference/map2.html), ... | [`modify2()`](https://purrr.tidyverse.org/reference/modify.html) | [`walk2()`](https://purrr.tidyverse.org/reference/map2.html) |
| 一个参数 + 索引 | [`imap()`](https://purrr.tidyverse.org/reference/imap.html) | [`imap_lgl()`](https://purrr.tidyverse.org/reference/imap.html), ... | [`imodify()`](https://purrr.tidyverse.org/reference/modify.html) | [`iwalk()`](https://purrr.tidyverse.org/reference/imap.html) |
| N 个参数        | [`pmap()`](https://purrr.tidyverse.org/reference/map2.html) | [`pmap_lgl()`](https://purrr.tidyverse.org/reference/map2.html), ... | —                                                                | [`pwalk()`](https://purrr.tidyverse.org/reference/map2.html) |

`map` 的基本构造如下，实际上是用 C 语言编写的，以节省性能，保留名称，并支持一些快捷方式。

```{r eval=FALSE}
simple_map <- function(x, f, ...) {
  out <- vector("list", length(x)) # 分配一个与输入长度相同的列表
  for (i in seq_along(x)) {        # 用 for 循环填充列表
    out[[i]] <- f(x[[i]], ...)
  }
  out
}
```

### 返回列表

[`purrr::map(1:3,f)`](https://purrr.tidyverse.org/reference/map.html) 接受一个向量和一个函数，为向量的每个元素调用一次函数，并在列表中返回结果，等价于[`list(f(1), f(2), f(3))`](https://rdrr.io/r/base/list.html)

```{r}
triple <- function(x) x * 3
map(1:3, triple)
```

### 返回原子向量

[`map_lgl()`、`map_int()`、`map_dbl()`、`map_chr()`](#0) 每个都返回一个指定类型的原子向量

```{r}
map_chr(mtcars, typeof) 
map_lgl(mtcars, is.double)  

n_unique <- function(x)length(unique(x)) 
map_int(mtcars, n_unique)  

map_dbl(mtcars, mean)
```

```{r}
by_cyl <- split(mtcars, mtcars$cyl)
by_cyl %>% 
  map(~ lm(mpg ~ wt, data = .x)) %>% 
  map(coef) %>% 
  map_dbl(2)
```

### **返回与输入类型相同的输出：`modify()`**

```{r}
df <- data.frame(
  x = 1:3,
  y = 6:4
)

# 返回列表
map(df, ~ .x * 2)

# 返回数据框
modify(df, ~ .x * 2)
```

### 无返回

某些函数主要是为了它们的副作用（如`cat()`、`write_csv()`、`ggsave()`）而被调用，并且捕获和存储它们的结果是没有意义的。

```{r}
welcome <- function(x) {
  cat("Welcome ", x, "!\n", sep = "")
}
names <- c("Hadley", "Jenny")
map(names, welcome)
```

```{r}
walk(names, welcome)
```

```{r}
cyls <- split(mtcars, mtcars$cyl)
paths <- paste0("data/cyl-", names(cyls), ".csv")
walk2(cyls, paths, write.csv)
```

等价于`write.csv(cyls[[1]]paths[[1]])`、`write.csv(cyls[[2]],paths[[2]])`

`write.csv(cyls[[3]], paths[[3]])`

### 两个输入

```{r}
set.seed(10)
xs <- map(1:8, ~ runif(10))


# 权重
set.seed(100)
ws <- map(1:8, ~ rpois(10, 5) + 1)

xs[[1]][[1]] <- NA
xs

# 未加权均值
map_dbl(xs, mean)
# 加权均值  weighted.mean()
map2_dbl(xs, ws, weighted.mean)
map2_dbl(xs, ws, weighted.mean, na.rm = TRUE)

```

### **遍历值和索引**

[`imap(x, f)`](https://purrr.tidyverse.org/reference/imap.html)等价于[`map2(x, names(x), f)`、`map2(x, seq_along(x), f)`](https://purrr.tidyverse.org/reference/map2.html)

[`imap()`](https://purrr.tidyverse.org/reference/imap.html)通常可用于构建标签：

```{r}
imap_chr(iris, ~ paste0("The first value of ", .y, " is ", .x[[1]]))
map2_chr(iris,names(iris),~ paste0("The first value of ", .y, " is ", .x[[1]]))

```

如果向量未命名，则第二个参数将是索引：

```{r}
x <- map(1:6, ~ sample(1000, 10))
imap_chr(x, ~ paste0("The maximum value of ", .y, " is ", max(.x)))
map2_chr(x,seq_along(x), ~ paste0("The highest value of ", .y, " is ", max(.x)))

```

### **任意数量的输入**

`map2(x, y, f )` 等价于 `pmap(list(x, y), f)`

```{r}
pmap_dbl(list(xs, ws), weighted.mean)
pmap_dbl(list(xs, ws), weighted.mean, na.rm = TRUE)
```

```{r}
# 命名列表 调用函数
params <- tibble::tribble(
  ~ n, ~ min, ~ max,
   1L,     0,     1,
   2L,    10,   100,
   3L,   100,  1000
)
typeof(params)
pmap(params, runif)
```

## `reduce` 家族

通过迭代应用两个输入的函数（a **binary** function）将列表简化为单个值。

### `reduce()`

[`reduce()`](https://purrr.tidyverse.org/reference/reduce.html)获取长度为 *n* 的向量，并通过一次调用具有一对值的函数来生成长度为 1 的向量

![](images/reduce.png){fig-align="center" width="50%"}

`reduce(1:4, f)`等价于`f(f(f(1, 2), 3), 4)`

```{r}
l <- map(1:4, ~ sample(1:10, 15, replace = T))

# 交集
reduce(l, intersect)

# 并集
reduce(l, union)
```

```{r eval=FALSE}
simple_reduce <- function(x, f) {
  out <- x[[1]]
  for (i in seq(2, length(x))) {
    out <- f(out, x[[i]])
  }
  out
}
```

### `accumulate()`

第一个变体 ，不仅返回最终结果，还返回所有中间结果

```{r}
accumulate(l, intersect)
```

```{r}
x <- c(4, 3, 10)
reduce(x, `+`)

accumulate(x, `+`)
```

### `reduce2(x,y,f,.init)`

## 谓词泛函

在编程和数学中，“谓词”（Predicate）是一个表达式，它返回一个布尔值（真或假）。谓词通常用于逻辑和函数式编程中，作为判断或决策的基础。

谓词泛函（Predicate Functionals）是谓词的一个特例，它是一个接受一个或多个参数，并返回一个布尔值的函数。谓词泛函在很多编程语言中都很常见，尤其是在支持函数式编程的语言中。

谓词泛函的一些关键特点包括：

1.  **返回布尔值**：谓词泛函的输出是一个布尔值，即真（true）或假（false）。

2.  **接受参数**：谓词泛函可以接收一个或多个参数，这些参数的值会影响函数的返回结果。

3.  **无副作用**：在函数式编程中，谓词泛函通常是纯函数，即它们不会产生副作用，也不会修改外部状态。

4.  **逻辑判断**：谓词泛函常用于逻辑判断，如条件语句（if）、循环（while、for）等。

-   [`some(.x, .p)`](https://purrr.tidyverse.org/reference/every.html)如果*存在*元素匹配，则返回`TRUE`;\
    [`every(.x, .p)`](https://purrr.tidyverse.org/reference/every.html)如果*所有元素都*匹配，则返回`TRUE`;\
    [`none(.x, .p)`](https://purrr.tidyverse.org/reference/every.html)*如果没有*元素匹配，则返回`TRUE`

    当它看到第一个时返回，当它们看到第一个或时返回。

-   [`detect(.x, .p)`](https://purrr.tidyverse.org/reference/detect.html)返回第一个匹配项的*值*;[`detect_index(.x, .p)`](https://purrr.tidyverse.org/reference/detect.html) 返回第一个匹配*项的位置*。

-   [`keep(.x, .p)`](https://purrr.tidyverse.org/reference/keep.html) *保留*所有匹配的元素; [`discard(.x, .p)`](https://purrr.tidyverse.org/reference/keep.html)*删除*所有匹配的元素。

```{r}
df <- data.frame(
  num1 = c(0, 10, 20),
  num2 = c(5, 6, 7),
  chr1 = c("a", "b", "c")
)
detect(df, is.factor)
detect_index(df, is.factor)
str(keep(df, is.factor))
str(discard(df, is.factor))
```

map变体也有谓词泛函

```{r}
str(map_if(df, is.numeric, mean))
str(modify_if(df, is.numeric, mean))
str(map(keep(df, is.numeric), mean))
```

## *base* 包泛函

### `apply()`

`base::apply()`

-   `X`，要汇总的矩阵或数组。

-   `MARGIN`，一个整数向量，给出要汇总的维度， 1 = 行，2 = 列，以此类推（参数名称来自思考 联合分布的边距）。

-   `FUN`，一个汇总函数。

```{r}
a3d <- array(1:24, c(4, 3, 2))
a3d
apply(a3d, c(1, 2), mean)
```

`lapply()`、`sapply()` 和 `vapply()` 针对的都是列表结构的数据，`sapply()`是简化（simplified）版本的 `lapply()`，而 `vapply()` 则在 `sapply()` 的基础上加了结果验证，以保证可靠性。

```{r}
set.seed(10)

temp <- list(
  35 + rnorm(10, mean = 1, sd = 10),
  20 + rnorm(5, mean = 1, sd = 3),
  25 + rnorm(22, mean = 2, sd = 6),
  33 + rnorm(14, mean = 4, sd = 20)
)
basic <- function(x) {
  c(min = min(x), mean = mean(x), median = median(x), max = max(x))
}
```

```{r}
lapply(temp, basic)
sapply(temp, basic)
```

```{r}
vapply(temp, basic, numeric(4))
```

`vapply()` 第 3 个参数传入对每一个子集调用函数后结果的预期，上述设定为包含 4 个元素的数值型向量。

### 数学泛函

## 函数式编程

```{r}
f <- function(x, fun) {
  fun(x)
}

f(1:10, sum)
f(1:10, quantile)
```

在我们创建的函数 `f()` 中，我们可以理解为对传入函数的 `mean()`、`sum()` 等函数重命名成 `fun()` 并进行调用。

```{r}
f2 <- function(type) {
  switch(type,
         mean = mean,
         sum = sum,
         quantile = quantile)
}
mean
f2("mean")

f2("mean")(1:10)
```
