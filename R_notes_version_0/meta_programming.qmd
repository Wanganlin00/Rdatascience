# 元编程

元编程（meta programming）是一种认为代码是可以通过编程检查和修改的数据（R代码可以描述为树，abstract syntax tree）的概念。例如，在最基本的层面，它允许你`library(purrr)`而无需`library("purrr")`和 自动添加`plot(x, sin(x))`坐标轴的标签；在更深层次，允许使用表达式`y ~ x1 + x2`代表一个模型，等等。

与元编程紧密相关的是非标准评估（non-standard evaluations，NSE），不遵循通常的评估规则，而是捕获键入的表达式并以自定义的方式对其进行评估。

整洁评估 tidy evaluation

1.  data masking

2.  quosure

3.  quasiquotation

rlang包的一些关键特性：

1.  非标准评估（Non-standard Evaluation, NSE）: rlang提供了工具来处理非标准评估，这是一种在R中常见的评估机制，允许函数根据其参数的语法结构来评估表达式。

2.  条件语句: rlang提供了更灵活的条件语句，如if和if_else，它们可以接受多种类型的条件表达式。

3.  错误处理: rlang提供了一套错误处理工具，如abort、warn、inform等，用于在函数中优雅地处理错误和警告。

4.  ...的捕获: rlang提供了一种机制来捕获函数调用中的`...`（点点点），并将其作为列表传递给其他函数。

5.  引用和引用类: rlang提供了引用（如sym和expr）和引用类（如**`quosure`**），它们允许更安全和灵活地操作变量名和表达式。

6.  函数构建: rlang提供了构建函数的工具，如function1和function2，它们允许在函数定义中使用更灵活的参数模式。

7.  管道操作符: rlang提供了实现管道操作符%\>%的底层机制。

```{r}
library(rlang)
library(lobstr)
```

## 代码即数据 `expression`

捕获的代码结构称为 **expression**，是四种类型（调用call、符号symbol、常量constant或配对列表pairlist）中任何一种的集合术语

```{r}
rlang::expr(mean(x, na.rm = TRUE))
```

```{r}
capture_it <- function(x) {
  expr(x)
}
capture_it(a + b + c)
```

捕获用户输入的函数参数

```{r}
capture_it <- function(x) {
  enexpr(x)
}

capture_it(mtcars$mpg)
```

捕获表达式后，可以检查和修改它，方法与列表类似。

```{r}
f <- expr(anystrings(x = 1, y = 2))
f

f[[1]]
f[[2]]

f$z <- 3
f


f[[2]] <- NULL
f

```

为什么是x没有了，调用的第一个元素是要调用的函数，这意味着第一个参数位于第二个位置

将代码的结构描述`expression`和执行`evaluate`分开。

```{r}
z <- rlang::expr(y <- x * 10)
z
x <- 4
eval(z)
y
```

## 代码即抽象语法树

抽象语法树（abstract syntax tree，AST）

前缀形式函数的树结构

```{r}
lobstr::ast(f(a, "b"))
```

嵌套函数调用创建更深入的分支树

```{r}
lobstr::ast(f1(f2(a, b), f3(1, f4(2))))
```

## 代码生成代码

```{r}
rlang::call2("anystring",1,2,3)

call2("+", 1, call2("*", 2, 3))
```

**unquote operator** `!!`（发音为 bang-bang）

```{r}
xx <- expr(x + x)
yy <- expr(y + y)

expr(!!xx / !!yy)
```

```{r}
# 变异系数
cv <- function(var) {
  var <- enexpr(var)
  expr(sd(!!var) / mean(!!var))
}

cv(x)
cv(x + y)
```

\## 评估执行代码

```{r}
base::eval(expr(x + y), env(x = 1, y = 10))
```

如果省略环境，将使用当前环境

```{r}
x <- 10
y <- 100
eval(expr(x + y))
```

## 函数自定义评估

Rebinding functions，改变函数内部的变量绑定

```{r}

# 字符串的加法和乘法 多态？
string_math <- function(x) {
  e <- env(
    caller_env(),
    `+` = function(x, y) paste0(x, y),
    `*` = function(x, y) strrep(x, y)
  )

  eval(enexpr(x), e)
}

name <- "Hadley"
string_math("Hello " + name)
string_math(("x" * 2 + "-y") * 3)
```

`dplyr`将这个想法发挥到了极致，在生成 SQL 以在远程数据库中执行的环境中运行代码：

```{r}
library(dplyr)
con <- DBI::dbConnect(RSQLite::SQLite(), filename = ":memory:")
mtcars_db <- copy_to(con, mtcars)

mtcars_db %>%
  filter(cyl > 2) %>%
  select(mpg:hp) %>%
  head(10) %>%
  show_query()

DBI::dbDisconnect(con)
```

## 数据自定义评估

在数据处理和分析中，"data masking"（数据掩蔽）是一种技术，用于隐藏或保护敏感信息，同时保留数据集中的模式和结构，以供分析使用。

1.  替换：将敏感数据替换为假数据或占位符。

2.  加密：对数据进行加密处理，只有拥有密钥的人才能访问原始数据。

3.  扰动：对数据进行小的随机变化，以保护数据的统计特性，同时避免识别出原始数据。

使用数据掩码进行评估是交互式分析的有用技术，因为它允许您编写 `x + y`而不是`df$x + df$y` .然而，这种便利是有代价的：模棱两可

```{r}
set.seed(10)
df <- data.frame(x = 1:5, y = sample(5))
eval_tidy(expr(x + y), df)
```

`base::with`

```{r}
with2 <- function(df, expr) {
  eval_tidy(enexpr(expr), df)
}

with2(df, x + y)
```

## quosure

```{r}
with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enexpr(expr), df)
}

df <- data.frame(x = 1:3)
a <- 10
with2(df, x + a)
```

将表达式与环境捆绑在一起的 `quosure` 数据结构,每当使用数据掩码时，必须始终使用`enquo()` 而不是`enexpr()`

```{r}
with2 <- function(df, expr) {
  a <- 1000
  eval_tidy(enquo(expr), df)
}

with2(df, x + a)
```
