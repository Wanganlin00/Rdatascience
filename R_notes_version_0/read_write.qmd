# 读取和写出

## Tibble

```{r}
library(tibble)
tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)

tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)
```

## Import

### 文本文件

常用的分隔符如逗号`,` ，制表符`\t`，分号`;`，空格`space`，...... 等。

#### `utils::`

utilities,a piece of computer software that performs a particular task

`read.table()` `read.csv()` `read.csv2`

```{r}
# 列名(第1行),行标识符 (第1列)
utils::read.table("data/read_write/leadership.txt",header = TRUE,sep=",",row.names = 1)
```

#### `readr::`

`read_csv()` `read_tsv()` `read_delim()`

```{r}
readr::read_csv("data/read_write/leadership.txt",
                col_names = TRUE,
                id = "file_path") |>
    column_to_rownames(var = "id")
```

#### 批量读取csv - 相同格式

```{r}
sales_files <- c("data/read_write//01-sales.csv",
                     "data/read_write//02-sales.csv",
                 "data/read_write//03-sales.csv")
read_csv(sales_files, id = "file_path")
```

### Excel

```{r}
library(readxl)
```

#### 批量读取 sheet

```{r}

filename <- "data/read_write/多个sheet-iris_data.xlsx"

excel_sheets(filename)

excel_sheets(filename) %>% 
    map(~read_excel(filename, sheet = .x)) %>% 
    set_names(excel_sheets(filename)) %>% map(head)

```

```{r}
read_excel_sheets <- function(filename, single_tbl = FALSE) {
  sheets <- readxl::excel_sheets(filename)
  
  if (single_tbl){ #指示函数应返回单个表还是表的列表的逻辑值
    x <- purrr::map_df(sheets, readxl::read_excel, path = filename)
  } else {
    x <- purrr::map(sheets, ~ readxl::read_excel(filename, sheet = .x))
    purrr::set_names(x, sheets)
  }
  
  x
}


read_excel_sheets(filename, F) %>% map(head)

read_excel_sheets(filename, T) %>% head()
```

#### 批量读取多个Excel

```{r}

excel_file_paths <- list.files(path = ".",pattern = ".xlsx",recursive = T)

excel_file_paths


map(excel_file_paths, read_excel) %>% map(head)
```

### 脚本载入

```{r}
source("data/read_write/add_function.R")
add(c(1,24,4),4)
```

::: callout-note
add_function

```{r}
add <- function(x,y){
  return(x+y)
}
```
:::

### 二进制文件

RDS，R's custom binary format called RDS

`read_rds()`

```{r}
read_rds("data/read_write/leadership.rds")
```

Parquet，a fast binary and columnar storage file format(列式存储文件)

```{r eval=FALSE}
library(arrow)
read_parquet(file = "data/read_write/leadership.parquet" )
```

### 数据库

```{r}
#| eval: false
library(DBI)
library(dbplyr)
```

### 等宽格式

`readr::read_fwf()`

```{r}
' First     Last  Sex Number
 Currer     Bell    F      2
    Dr.    Seuss    M     49
    ""   Student   NA     21' |> read_fwf()

```

### 网络下载

```{r}
url = "https://vincentarelbundock.github.io/Rdatasets/csv/datasets/co2.csv"
download.file(url, "data/read_write/网络下载.csv")
read_csv("data/read_write/网络下载.csv") %>% head()
```

### JSON

*javascript object notation*

```{r}
library(jsonlite)
read_json(path = "data/read_write/JSON.json",simplifyVector = TRUE)
```

### SPSS/SAS/stata DTA

read_sas(file)

read_dta(file)

read_stata(file)

```{r}
library(haven)
sav <- read_spss(file = "data/read_write/非正态分布的均值比较.sav")

table(sav$group)
read_sav(file = "data/read_write/非正态分布的均值比较.sav") %>% head()

```

### 键盘输入

```{r}
#| eval: false
df <- data.frame(id=character(0),age=numeric(0),sex=character(0))
df <- edit(df)

fix(df)
```

## Write

### 文本输出

```{r}
sink("data/sink_output.txt",append = F,split = T)  # split =T 输出到控制台和文件
letters
sink(NULL)
```

### 图片输出

Rstudio 直接 Export save as Image/PDF，copy to clipboard

```{r eval=FALSE}
pdf(file = "data/pdf_output.pdf")       # bmp,jpeg,png，SVG
plot(1:25,1:25,pch=1:25,col="green",bg="red",type = "b")
while(!is.null(dev.list()))  dev.off() 
```

### Excel

```{r}
library(writexl)
library(janitor)
library(dplyr)

df <- iris |> clean_names()
l <- df |>
  clean_names() |>
  split(f = df$species)

lt <- c(l, iris = list(df))

write_xlsx(lt, path = "data/read_write/多个sheet-iris_data.xlsx")
```

```         
write_xlsx(
  x,
  path = tempfile(fileext = ".xlsx"),
  col_names = TRUE,
  format_headers = TRUE,
  use_zip64 = FALSE
)
```
