## 表达式与抽象语法树

```{r}
library(rlang)
library(lobstr)
```

## 抽象语法树

表达式（expressions） 也称为抽象语法树（ abstract syntax trees ，ASTs）。

### 树结构

1.  实际运行代码，橙色矩形是分支，紫色符号是函数调用，白色是函数参数

2.  渲染成书后，灰色矩形是分支，右连函数调用，下连子项参数或函数

```{r}
lobstr::ast(f(g(1, 2), h(3, 4, i())))
```

### 非代码组间

空格和注释

```{r}
ast(
  f(x,  y)  # important!
)

lobstr::ast(y <-  x)

lobstr::ast(y < -x)
```

### 中缀调用

```{r}
`<-`(y,x)
`<-`(y, `*`(x, 10))
expr(`<-`(y, `*`(x, 10)))
lobstr::ast(y <- x * 10)
```

## 表达式

constant scalars, symbols, call objects, and pairlists

### 常量

```{r}
identical(expr(TRUE), TRUE)
identical(expr(1), 1)
identical(expr(2L), 2L)
identical(expr("x"), "x")
```

### 符号

symbol表示对象的名称

```{r}
# 捕获
expr(x)

# 字符串转换
rlang::sym("x")
```

```{r}
as_string(expr(x))
str(expr(x))
is.symbol(expr(x))
```

符号的长度始终为1，多个符号使用`rlang::syms()`

### 调用对象

调用对象是一种特殊类型的列表，其中第一个组件指定要调用的函数（通常为符号），其余元素是该函数调用的参数。

```{r}
lobstr::ast(read.table(file = "important.csv", row.names = FALSE))

x <- expr(read.table(file = "important.csv", row.names = FALSE))

typeof(x)
```

```{r}
x[[1]]
is.symbol(x[[1]])
as.list(x[-1])
x$header <- TRUE
x
```

由于 R 灵活的参数匹配规则，从调用中提取特定参数具有挑战性：它可能位于任何位置，具有全名、缩写名称或无名称。若要解决此问题，可以使用 `rlang::call_standardise()`标准化所有参数来使用全名。

```{r}
rlang::call_standardise(x)

```

函数位置

```{r}
lobstr::ast("foo"())
lobstr::ast(foo())
lobstr::ast(pkg::foo(1))
lobstr::ast(foo(1)(2))
```

构造函数调用

```{r}
call2("mean", x = expr(x), na.rm = TRUE)
call2(expr(base::mean), x = expr(x), na.rm = TRUE)
call2("<-", expr(x), 10)
```

### 配对列表

```{r}
f <- expr(function(x, y = 10) x + y)

args <- f[[2]]
args
typeof(args)
pl <- pairlist(x = 1, y = 2)
length(pl)
pl$x
```

### 缺失参数

空符号，empty symbol，表示缺失的参数

```{r}
missing_arg()
typeof(missing_arg())
is_missing(missing_arg())

is_missing(args[[1]])
```

`...`

```{r}
g <- expr(function(...) list(...))
g
args <- g[[2]]
args 
is_missing(args[[1]])
```

### **表达式向量**

```{r}
exp1 <- parse(text = c("
x <- 4
x
"))
exp2 <- expression(x <- 4, x)

typeof(exp1)
typeof(exp2)


exp1

exp2
```

表达式向量的行为也类似于列表

```{r}
exp1[[1]]
```

## 解析表达式

```{r}
# 字符串
x1 <- "y <- x + 10"
x1
is.call(x1)

# 表达式
x2 <- rlang::parse_expr(x1)
x2
is.call(x2)
```

```{r}
x3 <- "a <- 1; a + 1"
rlang::parse_exprs(x3)
```

```{r}
z <- expr(y <- x + 10)
expr_text(z)
```
