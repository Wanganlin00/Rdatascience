# 逻辑向量

## 逻辑比较

### 浮点比较

```{r}
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x
x == c(1, 2)
print(x, digits = 16)
near(x, c(1, 2))
```

### 缺失值

```{r}
# “contagious”
NA == NA
is.na(c(TRUE, NA, FALSE))
```

## 布尔代数

![](images/boolean_operations.png){fig-align="center" width="75%"}

```{r}
(x1 <- 1:10 %% 2 == 0)
(y1 <- 1:10 %% 5 == 0)

(x2 <- which(x1))
(y2 <- which(y1))
# 交集
x1 & y1
base::intersect(x2, y2)

# 并集
x1 | y1
base::union(x2,y2)

# 差集
x1 & !y1
base::setdiff(x2, y2)

# 只有一个为真
xor(x1, y1)
base::setdiff(base::union(x2, y2), base::intersect(x2, y2))
```

### 缺失值

```{r}
df <- tibble(x = c(TRUE, FALSE, NA))

df |> 
  mutate(
    and = x & NA,  #  A & B   A为TRUE，返回B ；A为FALSE,返回A
    or = x | NA    #  A | B   A为TRUE，返回A ；A为FALSE,返回B
  )
```

## `%in%`

```{r}
1:12 %in% c(1, 5, 11)

c(1, 2, NA) %in% NA
```

## 条件转换

### **`if_else()`**

```{r}
x <- c(-3:3, NA)

if_else(x > 0, "+ve", "-ve", missing = "???")
if_else(x == 0,
        "0", 
        if_else(x < 0, "-ve", "+ve"), "???")
```

```{r}
x1 <- c(NA, 1, 2, NA)
y1 <- c(3, NA, 4, 6)
if_else(is.na(x1), y1, x1)
```

### **`case_when()`**

```{r}
x <- c(-3:3, NA)
case_when(
  x == 0   ~ "0",
  x < 0    ~ "-ve", 
  x > 0    ~ "+ve",
  is.na(x) ~ "???"
)
```

## 逻辑汇总

```{r}
x<-c(2,3,5,1,4)
x>2

# 所有
all(x>2)   

# 存在
any(x>2)
```
