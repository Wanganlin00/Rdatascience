# 大数据 {.unnumbered}

## 稀疏矩阵

Sparse matrix

稀疏矩阵的典型构造方式是通过三元组。

```{r}
library(Matrix)
i <- c(1, 3:8) # 行指标
j <- c(2, 9, 6:10) # 列指标
x <- 7 * (1:7) # 数据
sparseMatrix(i, j, x = x)
```

稀疏矩阵对象仅存储非零元素，更节省内存

```{r}

N = 100

m = diag(1, N, N)
sp = sparseMatrix(1:N, 1:N, x = 1)
 
object.size(m)
object.size(sp)


```

## 并行计算 Parallel computing

![](images/parallel_computation.jpeg){fig-align="center"}

Cluster

Master

Worker

Job -\> (Spilt) -\> task 1,...,n, -\> (feed) -\> R worker

```{r}
library("parallel")
num_of_cores = detectCores()
num_of_cores

# 定义一个示例函数
example_function <- function(x) {
  return(x^2)
}

# 创建输入数据
input_data <- 1:1e5

```

`parLapply（cl， x， FUN， ...）`

`parApply（cl = NULL， X， MARGIN， FUN， ...）`

`parSapply（cl = NULL， X， FUN， ...， simplify = TRUE， USE.NAMES = TRUE)`

`makeCluster()`此函数指定要使用的处理器数量

```{r}
# 使用 parLapply （多进程并行）
# 创建集群
cl <- makeCluster(detectCores() - 1) # 创建一个集群，通常留一个核心给操作系统

# 将所需的库和数据导入集群
clusterExport(cl, varlist = c("example_function", "input_data"))

# 执行并行计算
result <- parSapply(cl, input_data, example_function) %>% as_tibble()
print(result)

# 关闭集群
stopCluster(cl)
```

```{r error=TRUE}
# 使用 mclapply （多进程并行）多线程（Multithreading）

# 使用 mclapply 执行并行计算
result <- mclapply(input_data, example_function, mc.cores = 4) # mc.cores 指定使用的核心数
print(result)

```

## 硬件

```{r}
if(!require(benchmarkme)) install.packages("benchmarkme")
```

1字节（byte）= 8位（bit） 二进制数 = 1个 ASCII 字符。

International System of Units (SI)

```{r}
# 随机存取存储器 Random access memory,RAM
benchmarkme::get_ram()
```

standard hard disk drives (HDDs)

Solid state drives (SSDs)

```{r}
# 操作系统 2^8
.Machine$sizeof.pointer
```

```{r}
# CPU
res = benchmark_std() 
plot(res)
```
